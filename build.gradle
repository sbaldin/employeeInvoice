
buildscript {
    ext {
        kotlinVersion = '1.3.60'
        spekVersion = '1.1.5'
        slf4jVersion = '1.7.25'
        poiVersion = '3.12'
        konfVersion = '0.20.0'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version '1.3.60'
    id "application"
    id "com.github.johnrengelman.shadow" version "5.0.0"
}

group 'com.github.sbaldin'
version '0.1'


mainClassName = "com.github.sbaldin.invoicer.ApplicationKt"
defaultTasks 'run'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile "org.jetbrains.kotlin:kotlin-test"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit"

    compile 'com.uchuhimo:konf-core:0.20.0'
    compile 'com.uchuhimo:konf-yaml:0.20.0'
    compile "org.apache.poi:poi:${poiVersion}"
    compile "org.apache.poi:poi-ooxml:${poiVersion}"
    compile "org.apache.poi:poi-ooxml-schemas:${poiVersion}"
    compile "org.apache.poi:poi-scratchpad:${poiVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-log4j12:${slf4jVersion}"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    testCompile("org.jetbrains.spek:spek-api:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile("org.jetbrains.spek:spek-data-driven-extension:$spekVersion") {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntime("org.jetbrains.spek:spek-junit-platform-engine:$spekVersion") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

//build.dependsOn shadowJar

jar {
    zip64 true
    manifest {
        attributes "Implementation-Title": "Invoice Generator"
        attributes "Implementation-Version": version
        attributes "Main-Class" : mainClassName
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
